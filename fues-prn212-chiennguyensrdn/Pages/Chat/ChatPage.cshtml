@page "{receiverId:int}"
@using System.Security.Claims
@model fues_prn221_chiennguyensrdn.Pages.Chat.ChatPageModel
@{
    var currentUserId = Model.CurrentUserId;
    var receiverId = int.Parse(RouteData.Values["receiverId"].ToString());
}

<div class="container">
    <div class="chat-sidebar">
        <ul>
            @foreach (var partner in Model.ChatPartners)
            {
                <li>
                    <button class="conversation-button" data-partner-id="@partner.Id">@partner.Name</button>
                </li>
            }
        </ul>
    </div>
    <div class="chat-window">
        <div class="chat-messages">
            <ul id="discussion">
                @foreach (var message in Model.Messages)
                {
                    <li class="message @(message.SenderId == currentUserId ? "sent" : "received")">
                        <div class="message-sender">@message.Sender.Name</div>
                        <div class="message-content">@message.Message1</div>
                    </li>
                }
            </ul>
        </div>
        <div class="chat-input">
            <input type="text" id="message" placeholder="Type your message here..." />
            <button id="sendmessage">Send</button>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.7/signalr.min.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chat-hub")
            .build();

        connection.on("ReceiveMessage", function (user, message) {
            console.log("user:", user, "message:", message)
            const discussion = document.getElementById('discussion');
            const li = document.createElement('li');
            li.className = 'message received';
            li.innerHTML = `<div class="message-sender">${user}</div><div class="message-content">${message}</div>`;
            discussion.appendChild(li);
        });

        connection.start().catch(function (error) {
            return console.error(error.toString());
        });


        document.querySelectorAll('.conversation-button').forEach(button => {
            button.addEventListener('click', function () {
                const partnerId = this.getAttribute('data-partner-id');
                fetchMessages(partnerId);
                window.location.href = `/Chat/ChatPage/${partnerId}`;
            });
        });

        document.getElementById("sendmessage").addEventListener("click", function (event) {
            const receiverId = @Model.ReceiverId;
            const senderId = @Model.CurrentUserId;
            const message = document.getElementById("message").value.trim();
            if (message !== '') {
                const discussion = document.getElementById('discussion');
                const li = document.createElement('li');
                li.className = 'message sent';
                li.innerHTML = `<div class="message-sender">@Model.CurrentUserName</div><div class="message-content">${message}</div>`;
                discussion.appendChild(li);
                connection.invoke("SendMessageToUser", receiverId, message)
                .then(() => {
                        document.getElementById("message").value = '';
                })
                .catch(err => console.error(err.toString()));
            }
            event.preventDefault();
        });
    </script>
}
<style>
    .chat-sidebar {
        width: 25%;
        background-color: #fff;
        border-right: 1px solid #ccc;
        padding: 20px;
        box-sizing: border-box;
    }

        .chat-sidebar h3 {
            margin-top: 0;
            font-size: 18px;
            color: #333;
        }

        .chat-sidebar ul {
            list-style-type: none;
            padding: 0;
        }

        .chat-sidebar li {
            margin-bottom: 10px;
        }

    .conversation-button {
        width: 100%;
        padding: 10px;
        border: none;
        background-color: #007bff;
        color: #fff;
        font-size: 16px;
        cursor: pointer;
        border-radius: 5px;
        transition: background-color 0.3s ease;
    }

        .conversation-button:hover {
            background-color: #0056b3;
        }

    .chat-window {
        width: 75%;
        display: flex;
        flex-direction: column;
        background-color: #fff;
        border-left: 1px solid #ccc;
    }

    .chat-messages {
        flex: 1;
        overflow-y: auto;
        padding: 20px;
    }

    .message {
        padding: 10px;
        margin-bottom: 10px;
        max-width: 80%;
        word-wrap: break-word;
        border-radius: 10px;
    }

    .sent {
        background-color: #007bff;
        color: #fff;
        align-self: flex-end;
    }

    .received {
        background-color: #f0f0f0;
        color: #333;
        align-self: flex-start;
    }

    .message-sender {
        font-weight: bold;
        margin-bottom: 5px;
    }

    .message-content {
        word-wrap: break-word;
    }

    .chat-input {
        display: flex;
        padding: 20px;
        border-top: 1px solid #ccc;
        background-color: #f9f9f9;
    }

        .chat-input input[type="text"] {
            flex: 1;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            margin-right: 10px;
            font-size: 16px;
        }

        .chat-input button {
            padding: 10px 20px;
            border: none;
            background-color: #007bff;
            color: #fff;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s ease;
        }

            .chat-input button:hover {
                background-color: #0056b3;
            }
</style>